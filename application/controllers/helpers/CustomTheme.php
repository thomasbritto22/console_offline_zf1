<?php/** * Action Helper for Themes Screen * * @uses Zend_Controller_Action_Helper_Abstract */class Helpers_CustomTheme extends Zend_Controller_Action_Helper_Abstract{    private $_sess;    /**	 * Constructor: initialize plugin loader	 *	 * @return void	 */	public function __construct() {			}		public function renderTheme($themeSettings) {					foreach($themeSettings as $key => $val) {				$this->_actionController->view->$key = $val->value;				if($key == 'themeui_content_bgcolor') {					$this->_actionController->view->themeui_content_bgcolor_faded = $this->hex2rgba($val->value);				}			}                if(isset($this->_sess->siteConfigs['catalystSiteConfigs']['visualDesign']) && $this->_sess->siteConfigs['catalystSiteConfigs']['visualDesign'])                            return $this->_actionController->view->render('helpers/customtheme-vd.phtml');                else                    return $this->_actionController->view->render('helpers/customtheme.phtml');                			}	public function hex2rgba($color) { 		$default = 'rgb(0,0,0)';	 		//Return default if no color provided		if(empty($color)) return $default; 	 		//Sanitize $color if "#" is provided 	    if ($color[0] == '#' ) {	       	$color = substr( $color, 1 );		}	 	    //Check if color has 6 or 3 characters and get values		if (strlen($color) == 6) {				$hex = array( $color[0] . $color[1], $color[2] . $color[3], $color[4] . $color[5] );		} elseif ( strlen( $color ) == 3 ) {				$hex = array( $color[0] . $color[0], $color[1] . $color[1], $color[2] . $color[2] );		} else {				return $default;		} 		//Convert hexadec to rgb		$rgb =  array_map('hexdec', $hex); 		$output = 'rgba('.implode(",",$rgb).',0.4)';		return $output;	}	/**	 * Strategy pattern: call helper as broker method	 *	 * @param  string $themesettings         * @param  object $sess	 * @return HTML_Output	 */	public function direct($themesettings, $sess) {                $this->_sess = $sess;		return $this->renderTheme($themesettings);	}}